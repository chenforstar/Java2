#spring.shardingsphere.datasource.names=ds0,ds1
#
#
##配置数据源
#spring.shardingsphere.datasource.ds0.jdbcUrl=jdbc:mysql://localhost:3306/sharding_order
#  # 数据库 URL 连接
#spring.shardingsphere.datasource.ds0.type=com.zaxxer.hikari.HikariDataSource
#    # 数据库连接池类名称
#spring.shardingsphere.datasource.ds0.driver-class-name=com.mysql.cj.jdbc.Driver
#  # 数据库驱动类名
#spring.shardingsphere.datasource.ds0.username=root
#  # 数据库用户名
#spring.shardingsphere.datasource.ds0.password=root
#  # 数据库密码
##spring.shardingsphere.datasource.ds0.xxx=  # 数据库连接池的其它属性
#
#spring.shardingsphere.datasource.ds1.jdbcUrl=jdbc:mysql://localhost:3306/sharding_order2
#   # 数据库 URL 连接
#spring.shardingsphere.datasource.ds1.type=com.zaxxer.hikari.HikariDataSource
#  # 数据库连接池类名称
#spring.shardingsphere.datasource.ds1.driver-class-name=com.mysql.cj.jdbc.Driver
#  # 数据库驱动类名
#spring.shardingsphere.datasource.ds1.username=root
#  # 数据库用户名
#spring.shardingsphere.datasource.ds1.password=root
#  # 数据库密码
#
#
#
##实际表节点
#spring.shardingsphere.rules.sharding.tables.t_order.actual-data-nodes=ds$->{0..1}.t_order_$->{1..2}
#  # 由数据源名 + 表名组成，以小数点分隔。多个表以逗号分隔，支持inline表达式。缺省表示使用已知数据源与逻辑表名称生成数据节点，用于广播表（即每个库中都需要一个同样的表用于关联查询，多为字典表）或只分库不分表且所有库的表结构完全一致的情况
##数据库分片
#spring.shardingsphere.rules.sharding.tables.t_order.database-strategy.inline.sharding-column=user_id
#spring.shardingsphere.rules.sharding.tables.t_order.database-strategy.inline.algorithm-expression=ds$->{user_id%2}
##数据表分片
#spring.shardingsphere.rules.sharding.tables.t_order.table-strategy.inline.sharding-column=id
#spring.shardingsphere.rules.sharding.tables.t_order.table-strategy.inline.algorithm-expression=t_order_$->{id%2+1}
#
##全局表也称为广播表
#spring.shardingsphere.rules.sharding.broadcast-tables=area
#  # 广播表规则列表
#
##配置mybatis
#mybatis.mapper-locations=/mybatis/*.xml
#logging.pattern.dateformat=HH:mm:ss
#
#
##严重怀疑是引文OrderMapper里的表t_order1是找不到的
#
#
### 分库策略，缺省表示使用默认分库策略，以下的分片策略只能选其一
##
### 用于单分片键的标准分片场景
##spring.shardingsphere.rules.sharding.tables.<table-name>.database-strategy.standard.sharding-column= # 分片列名称
##spring.shardingsphere.rules.sharding.tables.<table-name>.database-strategy.standard.sharding-algorithm-name= # 分片算法名称
##
### 用于多分片键的复合分片场景
##spring.shardingsphere.rules.sharding.tables.<table-name>.database-strategy.complex.sharding-columns= # 分片列名称，多个列以逗号分隔
##spring.shardingsphere.rules.sharding.tables.<table-name>.database-strategy.complex.sharding-algorithm-name= # 分片算法名称
##
### 用于Hint 的分片策略
##spring.shardingsphere.rules.sharding.tables.<table-name>.database-strategy.hint.sharding-algorithm-name= # 分片算法名称
##
### 分表策略，同分库策略
##spring.shardingsphere.rules.sharding.tables.<table-name>.table-strategy.xxx= # 省略
##
### 自动分片表配置
##spring.shardingsphere.rules.sharding.auto-tables.<auto-table-name>.actual-data-sources= # 数据源名
##
##spring.shardingsphere.rules.sharding.auto-tables.<auto-table-name>.sharding-strategy.standard.sharding-column= # 分片列名称
##spring.shardingsphere.rules.sharding.auto-tables.<auto-table-name>.sharding-strategy.standard.sharding-algorithm= # 自动分片算法名称
##
### 分布式序列策略配置
##spring.shardingsphere.rules.sharding.tables.<table-name>.key-generate-strategy.column= # 分布式序列列名称
##spring.shardingsphere.rules.sharding.tables.<table-name>.key-generate-strategy.key-generator-name= # 分布式序列算法名称
##
##spring.shardingsphere.rules.sharding.binding-tables[0]= # 绑定表规则列表
##spring.shardingsphere.rules.sharding.binding-tables[1]= # 绑定表规则列表
##spring.shardingsphere.rules.sharding.binding-tables[x]= # 绑定表规则列表
##
##spring.shardingsphere.rules.sharding.broadcast-tables[0]= # 广播表规则列表
##spring.shardingsphere.rules.sharding.broadcast-tables[1]= # 广播表规则列表
##spring.shardingsphere.rules.sharding.broadcast-tables[x]= # 广播表规则列表
##
##spring.shardingsphere.sharding.default-database-strategy.xxx= # 默认数据库分片策略
##spring.shardingsphere.sharding.default-table-strategy.xxx= # 默认表分片策略
##spring.shardingsphere.sharding.default-key-generate-strategy.xxx= # 默认分布式序列策略
##spring.shardingsphere.sharding.default-sharding-column= # 默认分片列名称
##
### 分片算法配置
##spring.shardingsphere.rules.sharding.sharding-algorithms.<sharding-algorithm-name>.type= # 分片算法类型
##spring.shardingsphere.rules.sharding.sharding-algorithms.<sharding-algorithm-name>.props.xxx=# 分片算法属性配置
##
### 分布式序列算法配置
##spring.shardingsphere.rules.sharding.key-generators.<key-generate-algorithm-name>.type= # 分布式序列算法类型
##spring.shardingsphere.rules.sharding.key-generators.<key-generate-algorithm-name>.props.xxx= # 分布式序列算法